import heapq

class Node:
    def _init_(self, position, parent=None):
        self.position = position
        self.parent = parent
        self.g = 0  # Cost from start node to current node
        self.h = 0  # Heuristic (estimated cost from current node to goal node)
        self.f = 0  # Total cost (g + h)

    def _lt_(self, other):
        return self.f < other.f

def astar(grid, start, end):
    open_list = []
    closed_list = set()
    start_node = Node(start)
    end_node = Node(end)
    heapq.heappush(open_list, start_node)

    while open_list:
        current_node = heapq.heappop(open_list)

        if current_node.position == end_node.position:
            path = []
            while current_node is not None:
                path.append(current_node.position)
                current_node = current_node.parent
            return path[::-1]  # Return reversed path

        closed_list.add(current_node.position)

        for next_position in [(0, -1), (0, 1), (-1, 0), (1, 0), (-1, -1), (-1, 1), (1, -1), (1, 1)]:  # Adjacent squares
            new_position = (current_node.position[0] + next_position[0], current_node.position[1] + next_position[1])

            if new_position[0] < 0 or new_position[0] >= len(grid) or new_position[1] < 0 or new_position[1] >= len(grid[0]):
                continue

            if grid[new_position[0]][new_position[1]] == 1:  # Check if the position is obstructed
                continue

            if new_position in closed_list:
                continue

            new_node = Node(new_position, current_node)
            new_node.g = current_node.g + 1  # Assuming each step costs 1
            new_node.h = abs(new_position[0] - end_node.position[0]) + abs(new_position[1] - end_node.position[1])
            new_node.f = new_node.g + new_node.h

            heapq.heappush(open_list, new_node)

    return None  # No path found

# Example usage:
grid = [
    [0, 0, 0, 0, 0],
    [0, 1, 1, 1, 0],
    [0, 0, 0, 0, 0],
    [0, 1, 1, 1, 0],
    [0, 0, 0, 0, 0]
]
start = (0, 0)
end = (4, 4)
path = astar(grid, start, end)
if path:
    print("Shortest path:", path)
else:
    print("No path found")
