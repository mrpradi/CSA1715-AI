from itertools import permutations

def is_valid(puzzle, solution):
    # Check if the solution is valid for the given puzzle
    for i in range(len(puzzle)):
        for j in range(len(puzzle[i])):
            if puzzle[i][j].isalpha():
                solution_char = solution[puzzle[i][j]]
                if j == 0 and solution_char == '0':
                    return False  # Leading zeros are not allowed
                puzzle[i] = puzzle[i][:j] + solution_char + puzzle[i][j+1:]

    return int(puzzle[0]) + int(puzzle[1]) == int(puzzle[2])

def solve_cryptarithmetic(puzzle):
    unique_chars = set(char for word in puzzle for char in word if char.isalpha())
    if len(unique_chars) > 10:
        print("Invalid puzzle. Too many unique characters.")
        return None

    for permutation in permutations('0123456789', len(unique_chars)):
        solution = dict(zip(unique_chars, permutation))
        if is_valid(puzzle.copy(), solution):
            return solution

    return None

if _name_ == "_main_":
    # Example puzzle: SEND + MORE = MONEY
    puzzle = ["SEND", "MORE", "MONEY"]

    solution = solve_cryptarithmetic(puzzle)
    if solution:
        print("Solution found:")
        for word in puzzle:
            print(word, end=" ")
            for char in word:
                print(solution[char], end="")
            print()
    else:
        print("No solution exists.")
