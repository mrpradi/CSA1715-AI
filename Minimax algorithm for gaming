import math

class TicTacToe:
    def __init__(self):
        self.board = [' ' for _ in range(9)]

    def print_board(self):
        for row in [self.board[i * 3:(i + 1) * 3] for i in range(3)]:
            print('| ' + ' | '.join(row) + ' |')

    def available_moves(self):
        return [i for i, spot in enumerate(self.board) if spot == ' ']

    def num_empty_squares(self):
        return self.board.count(' ')

    def make_move(self, square, letter):
        if self.board[square] == ' ':
            self.board[square] = letter
            return True
        return False

    def undo_move(self, square):
        self.board[square] = ' '

    def winner(self, letter):
        # Check rows
        for i in range(0, 9, 3):
            if all([spot == letter for spot in self.board[i:i+3]]):
                return True

        # Check columns
        for i in range(3):
            if all([self.board[i+j*3] == letter for j in range(3)]):
                return True

        # Check diagonals
        if all([self.board[i] == letter for i in [0, 4, 8]]) or all([self.board[i] == letter for i in [2, 4, 6]]):
            return True

        return False


def minimax(board, max_player, alpha, beta):
    if board.winner('X'):
        return {'position': None, 'score': 1}  # Max player wins
    elif board.winner('O'):
        return {'position': None, 'score': -1}  # Min player wins
    elif board.num_empty_squares() == 0:
        return {'position': None, 'score': 0}  # Tie

    if max_player:
        best = {'position': None, 'score': -math.inf}  # Initialize to negative infinity
        for move in board.available_moves():
            board.make_move(move, 'X')
            sim_score = minimax(board, False, alpha, beta)
            board.undo_move(move)
            sim_score['position'] = move
            if sim_score['score'] > best['score']:
                best = sim_score
            alpha = max(alpha, best['score'])
            if alpha >= beta:
                break
        return best
    else:
        best = {'position': None, 'score': math.inf}  # Initialize to positive infinity
        for move in board.available_moves():
            board.make_move(move, 'O')
            sim_score = minimax(board, True, alpha, beta)
            board.undo_move(move)
            sim_score['position'] = move
            if sim_score['score'] < best['score']:
                best = sim_score
            beta = min(beta, best['score'])
            if beta <= alpha:
                break
        return best


def get_best_move(board):
    if len(board.available_moves()) == 9:
        return 0  # Choose the center if it's the first move
    else:
        return minimax(board, True, -math.inf, math.inf)['position']


if __name__ == '__main__':
    t = TicTacToe()
    while t.num_empty_squares() > 0 and not (t.winner('X') or t.winner('O')):
        if t.num_empty_squares() % 2 == 1:
            human_move = int(input("Enter your move (0-8): "))
            t.make_move(human_move, 'X')
        else:
            computer_move = get_best_move(t)
            t.make_move(computer_move, 'O')
        t.print_board()

    if t.winner('X'):
        print("You win!")
    elif t.winner('O'):
        print("Computer wins!")
    else:
        print("It's a tie!")
